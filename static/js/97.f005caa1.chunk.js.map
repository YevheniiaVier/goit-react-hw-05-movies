{"version":3,"file":"static/js/97.f005caa1.chunk.js","mappings":"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","sources":["pages/MovieCardPage/MovieCardPage.styled.js","pages/MovieCardPage/MovieCardPage.jsx","services/movies-api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const StyledLink = styled(NavLink)`\n  text-decoration: none;\n  display: inline-block;\n  border-radius: 10rem;\n  padding-top: ${p => p.theme.space[4]}px;\n  padding-bottom: ${p => p.theme.space[4]}px;\n  padding-left: ${p => p.theme.space[6]}px;\n  padding-right: ${p => p.theme.space[6]}px;\n  background-color: ${p => p.theme.colors.accentDark};\n  color: ${p => p.theme.colors.primary};\n  font-size: ${p => p.theme.fontSizes.m};\n  font-weight: ${p => p.theme.fontWeights.bolder};\n  transition: all 300ms 100ms;\n  &.active {\n    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n      0px 2px 1px rgba(0, 0, 0, 0.2);\n    color: ${p => p.theme.colors.white};\n    background-color: ${p => p.theme.colors.accent};\n  }\n  &:hover {\n    color: ${p => p.theme.colors.white};\n  }\n`;\n\nexport const MenuList = styled.ul`\n  list-style: none;\n  display: flex;\n  gap: 40px;\n  //   justify-content: center;\n`;\n\nexport const MenuItem = styled.li`\n  font-weight: 500;\n  font-size: 20px;\n  color: ${p => p.theme.colors.primary};\n`;\n\nexport const Box = styled.div`\n  display: flex;\n  margin-top: 40px;\n  gap: 20px;\n`;\nexport const PosterBox = styled.div`\n  margin-bottom: 40px;\n`;\n\nexport const Title = styled.h2`\n  margin: 0;\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 1.15;\n  color: #000000;\n  text-transform: uppercase;\n  @media screen and (min-width: 1280px) {\n    font-size: 30px;\n  }\n`;\nexport const SubTitle = styled.h3`\n  text-transform: uppercase;\n`;\n\nexport const InfoBox = styled.div`\n  font-weight: 500;\n  font-size: 12px;\n  line-height: 1.16;\n  color: #000000;\n`;\nexport const Info = styled.p`\n  margin: 0;\n\n  font-weight: 500;\n  font-size: 12px;\n  line-height: 1.66;\n  color: #000000;\n`;\n\nexport const GoBackBtn = styled.button`\n  align-items: center;\n  width: 120px;\n  appearance: none;\n  background-image: radial-gradient(\n    100% 100% at 100% 0,\n    #0cf 0,\n    rgb(8, 157, 194) 100%\n  );\n  border: 0;\n  border-radius: 6px;\n  box-shadow: rgba(45, 35, 66, 0.4) 0 2px 4px,\n    rgba(45, 35, 66, 0.3) 0 7px 13px -3px, rgba(58, 65, 111, 0.5) 0 -3px 0 inset;\n  box-sizing: border-box;\n  color: #fff;\n  cursor: pointer;\n  display: inline-flex;\n  gap: 5px;\n  font-family: 'JetBrains Mono', monospace;\n  height: 40px;\n  justify-content: center;\n  line-height: 1;\n  list-style: none;\n  overflow: hidden;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: relative;\n  text-align: left;\n  text-decoration: none;\n  transition: box-shadow 0.15s, transform 0.15s;\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  white-space: nowrap;\n  will-change: box-shadow, transform;\n  font-size: 18px;\n  &:hover,\n  &:focus {\n    box-shadow: rgba(45, 35, 66, 0.4) 0 4px 8px,\n      rgba(45, 35, 66, 0.3) 0 7px 13px -3px, #rgb(8, 157, 194) 0 -3px 0 inset;\n  }\n  transition: background-color 300ms 100ms;\n`;\n\nexport const Poster = styled.img.attrs(props => ({\n  src: props.src,\n  alt: props.alt,\n}))`\n  width: 100%;\n`;\n","import PropTypes from 'prop-types';\n\nimport { useParams, useNavigate, Outlet, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { RiArrowGoBackFill } from 'react-icons/ri';\nimport { getMovieCard } from 'services/movies-api';\nimport { Loader } from 'components/Loader/Loader';\n\nimport {\n  Box,\n  Title,\n  GoBackBtn,\n  SubTitle,\n  InfoBox,\n  Info,\n  Poster,\n  PosterBox,\n  MenuItem,\n  MenuList,\n  StyledLink as Link,\n} from './MovieCardPage.styled';\n\nconst MovieCardPage = () => {\n  const [movieCard, setMovieCard] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const from = location.state?.from || '/movies';\n  const goBack = () => navigate(from);\n\n  useEffect(() => {\n    const fetchMovieCard = async () => {\n      try {\n        setLoading(true);\n        const result = await getMovieCard(id);\n        setMovieCard(result);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieCard();\n  }, [id]);\n\n  const {\n    title,\n    name,\n    original_name,\n    original_title,\n    genres,\n    vote_average,\n    overview,\n    poster_path,\n  } = movieCard;\n\n  const movieTitle = title ?? name ?? original_name ?? original_title ?? '';\n  const movieGenres = genres ? genres.map(genre => genre.name) : '';\n  const popularity = vote_average !== 0 ? vote_average : false;\n\n  return (\n    <>\n      <GoBackBtn type=\"button\" onClick={goBack}>\n        <RiArrowGoBackFill /> Go back\n      </GoBackBtn>\n      <Box>\n        {loading && <Loader />}\n        {error && <p>{error.message}</p>}\n        {poster_path && (\n          <PosterBox>\n            <Poster\n              srcset={`https://image.tmdb.org/t/p/w300${poster_path}      300w,\n                https://image.tmdb.org/t/p/w500${poster_path}      500w,\n                https://image.tmdb.org/t/p/w780${poster_path}      780w,\n                https://image.tmdb.org/t/p/w1280${poster_path}    1280w,\n                https://image.tmdb.org/t/p/original${poster_path} 2000w\n              `}\n              src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n              sizes={`(min - width:1280px) 375px, (min-width:768px) 264px, 100vw`}\n              alt={movieTitle}\n            />\n          </PosterBox>\n        )}\n        <InfoBox>\n          <Title>{movieTitle}</Title>\n\n          {popularity && (\n            <Info>User Score: {vote_average.toFixed() * 10 + '%'}</Info>\n          )}\n          {overview && (\n            <>\n              <SubTitle>Overview</SubTitle>\n              <Info>{overview}</Info>\n            </>\n          )}\n          {movieGenres && (\n            <>\n              <SubTitle>Genres</SubTitle>\n              <Info>{movieGenres.join(', ')}</Info>\n            </>\n          )}\n        </InfoBox>\n      </Box>\n      <MenuList>\n        <MenuItem>\n          <Link state={{ from }} to={`/movies/${id}/cast`}>\n            Cast\n          </Link>\n        </MenuItem>\n        <MenuItem>\n          <Link state={{ from }} to={`/movies/${id}/reviews`}>\n            Reviews\n          </Link>\n        </MenuItem>\n      </MenuList>\n      <Outlet />\n    </>\n  );\n};\n\nMovieCardPage.propTypes = {\n  movieCard: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    original_name: PropTypes.string.isRequired,\n    original_title: PropTypes.string.isRequired,\n    genres: PropTypes.string.isRequired,\n    vote_average: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n  }),\n};\n\nexport default MovieCardPage;\n","import axios from 'axios';\n\n// export const API_KEY = '62e7f60baa5f08ed1edf6bd3ed6b9146';\n// export const BASE_URL = 'https://api.themoviedb.org/3';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '62e7f60baa5f08ed1edf6bd3ed6b9146',\n    language: 'en-US',\n  },\n});\n\nexport const getMovies = async (page = 1) => {\n  const { data } = await instance.get(`/trending/all/day?`, {\n    params: {\n      page,\n    },\n  });\n  return data.results;\n};\n\nexport const getMovieCard = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMovieBySearch = async (query, page) => {\n  const { data } = await instance.get(`search/movie`, {\n    params: {\n      query,\n      page,\n    },\n  });\n\n  return data;\n};\n\nexport const getCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data.results;\n};\n"],"names":["StyledLink","styled","NavLink","p","theme","space","colors","accentDark","primary","fontSizes","m","fontWeights","bolder","white","accent","MenuList","MenuItem","Box","PosterBox","Title","SubTitle","InfoBox","Info","GoBackBtn","Poster","props","src","alt","useState","movieCard","setMovieCard","loading","setLoading","error","setError","id","useParams","navigate","useNavigate","from","useLocation","state","useEffect","fetchMovieCard","getMovieCard","result","message","title","name","original_name","original_title","genres","vote_average","overview","poster_path","movieTitle","movieGenres","map","genre","popularity","type","onClick","Loader","srcset","sizes","toFixed","join","to","instance","axios","baseURL","params","api_key","language","getMovies","page","get","data","results","getMovieBySearch","query","getCast","cast","getReviews"],"sourceRoot":""}