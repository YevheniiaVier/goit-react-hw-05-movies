{"version":3,"file":"static/js/53.b3ce8465.chunk.js","mappings":"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","sources":["components/MoviesAbsenceView/MoviesAbsenceView.styled.js","components/MoviesAbsenceView/MoviesAbsenceView.jsx","pages/CastPage/CastPage.styled.js","pages/CastPage/CastPage.jsx","services/movies-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nexport const ErrorMessage = styled.p`\n  color: ${p => p.theme.colors.primary};\n  font-weight: ${p => p.theme.fontWeights.bold};\n  font-size: ${p => p.theme.fontSizes.l};\n`;\n\nexport const ErrorImage = styled.img.attrs(props => ({\n  src: props.src,\n  alt: props.alt,\n}))`\n  width: 260px;\n`;\n","import PropTypes from 'prop-types';\n\nimport errorImage from '../../images/noImages.png';\nimport {\n  StyledBox,\n  ErrorImage,\n  ErrorMessage,\n} from './MoviesAbsenceView.styled';\n\nexport const MoviesAbsenceView = ({ message }) => {\n  return (\n    <StyledBox>\n      <ErrorMessage>{message}</ErrorMessage>\n      <ErrorImage src={errorImage} alt=\"No images found\" />\n    </StyledBox>\n  );\n};\n\nMoviesAbsenceView.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const CastBox = styled.div`\n  display: flex;\n  justify-content: center;\n`;\nexport const CastInfo = styled.p`\n  margin: 0;\n`;\n\nexport const CastImg = styled.img.attrs(props => ({\n  src: props.src,\n  alt: props.alt,\n}))`\n  width: 100%;\n  height: auto;\n  border-radius: 5px 5px 5px 5px;\n`;\n\nexport const CastList = styled.ul`\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 20px;\n  display: flex;\n  flex-wrap: wrap;\n\n  gap: 20px;\n  padding: 0;\n\n  justify-content: space-around;\n`;\n\nexport const CastCard = styled.li`\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n\n  justify-content: center;\n  width: 220px;\n`;\n","import { useState, useEffect } from 'react';\nimport { getCast } from 'services/movies-api';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { MoviesAbsenceView } from 'components/MoviesAbsenceView/MoviesAbsenceView';\nimport {\n  CastBox,\n  CastImg,\n  CastInfo,\n  CastCard,\n  CastList,\n} from './CastPage.styled';\n\nimport defaultImg from '../../images/default.png';\n\nconst CastPage = () => {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        setLoading(true);\n\n        const result = await getCast(id);\n        setCast(result);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovieCast();\n  }, [id]);\n\n  // useEffect(() => {\n  //   onSmoothScroll();\n  // }, [cast]);\n\n  const elements = cast.map(\n    ({ id, name, original_name, profile_path, character }, index) => (\n      <CastCard key={id + name + index}>\n        <CastImg\n          src={\n            profile_path === null\n              ? defaultImg\n              : `https://image.tmdb.org/t/p/w300/${profile_path}`\n          }\n          alt={name ?? original_name}\n          loading=\"lazy\"\n        />\n        {name ?? original_name}\n\n        <CastInfo>Character: {character}</CastInfo>\n      </CastCard>\n    )\n  );\n  return (\n    <CastBox id=\"card\">\n      {loading && <Loader />}\n      {error && <p>{error.message}</p>}\n      {cast.length > 0 && <CastList>{elements}</CastList>}\n      {cast.length === 0 && (\n        <MoviesAbsenceView message=\"No information about cast\" />\n      )}\n    </CastBox>\n  );\n};\n\nCastPage.defaultProps = {\n  movies: [],\n};\n\nexport default CastPage;\n\n// function onSmoothScroll() {\n//   window.scrollBy({\n//     top: 150,\n//     behavior: 'smooth',\n//   });\n// }\n","import axios from 'axios';\n\n// export const API_KEY = '62e7f60baa5f08ed1edf6bd3ed6b9146';\n// export const BASE_URL = 'https://api.themoviedb.org/3';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '62e7f60baa5f08ed1edf6bd3ed6b9146',\n    language: 'en-US',\n  },\n});\n\nexport const getMovies = async (page = 1) => {\n  const { data } = await instance.get(`/trending/all/day?`, {\n    params: {\n      page,\n    },\n  });\n  return data.results;\n};\n\nexport const getMovieCard = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMovieBySearch = async (query, page) => {\n  const { data } = await instance.get(`search/movie`, {\n    params: {\n      query,\n      page,\n    },\n  });\n\n  return data;\n};\n\nexport const getCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const getReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data.results;\n};\n"],"names":["StyledBox","styled","ErrorMessage","p","theme","colors","primary","fontWeights","bold","fontSizes","l","ErrorImage","props","src","alt","MoviesAbsenceView","message","errorImage","CastBox","CastInfo","CastImg","CastList","CastCard","CastPage","useState","cast","setCast","loading","setLoading","error","setError","id","useParams","useEffect","fetchMovieCast","getCast","result","elements","map","index","name","original_name","profile_path","character","defaultImg","Loader","length","defaultProps","movies","instance","axios","baseURL","params","api_key","language","getMovies","page","get","data","results","getMovieCard","getMovieBySearch","query","getReviews"],"sourceRoot":""}